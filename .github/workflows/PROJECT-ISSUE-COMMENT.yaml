name: 이슈 브랜치/커밋 가이드 자동 댓글

on:
  issues:
    types: [opened, reopened]

jobs:
  add-comment:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get Issue information
        id: issue-info
        run: |
          echo "ISSUE_URL=${{ github.event.issue.html_url }}" >> $GITHUB_ENV
      
      - name: Call Suh Project Utility API
        id: api-call
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://lab.suhsaechan.me/api/issue-helper/create/commmit-branch/github-workflow'
          method: 'POST'
          contentType: 'multipart/form-data'
          customHeaders: '{"Accept": "application/json"}'
          data: |
            {
              "issueUrl": "${{ env.ISSUE_URL }}"
            }
            
      - name: Debug API Response
        run: |
          echo "API Status: ${{ steps.api-call.outputs.status }}"
          echo "API Response: ${{ steps.api-call.outputs.response }}"
            
      - name: Check API response
        id: check-response
        run: |
          if [ "${{ steps.api-call.outputs.status }}" == "200" ]; then
            echo "API call successful"
            # 응답에서 commentMarkdown 필드 추출 (응답이 JSON 형식인지 확인)
            MARKDOWN=$(echo '${{ steps.api-call.outputs.response }}' | jq -r '.commentMarkdown // empty')
            
            if [ -n "$MARKDOWN" ]; then
              echo "COMMENT_BODY=$MARKDOWN" >> $GITHUB_ENV
            else
              # fallback - JSON에서 필요한 정보를 수동으로 구성
              BRANCH=$(echo '${{ steps.api-call.outputs.response }}' | jq -r '.branchName // "브랜치명을 가져올 수 없습니다"')
              COMMIT=$(echo '${{ steps.api-call.outputs.response }}' | jq -r '.commitMessage // "커밋 메시지를 가져올 수 없습니다"')
              
              COMMENT_MD="<!-- 이 댓글은 SUH Project Utility에 의해 자동으로 생성되었습니다. - https://lab.suhsaechan.me -->\n\n## 🛠️ 브랜치/커밋 가이드\n\n### 브랜치\n\`\`\`\n$BRANCH\n\`\`\`\n\n### 커밋 메시지\n\`\`\`\n$COMMIT\n\`\`\`\n\n<!-- 이 댓글은 SUH Project Utility에 의해 자동으로 생성되었습니다. - https://lab.suhsaechan.me -->"
              
              echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
              echo -e "$COMMENT_MD" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
          else
            echo "API call failed with status ${{ steps.api-call.outputs.status }}"
            echo "COMMENT_BODY=API 호출에 실패했습니다. 레포지토리가 허용 목록에 있는지 확인하세요." >> $GITHUB_ENV
          fi
      
      - name: Add comment to Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = process.env.COMMENT_BODY;
            if (!commentBody) {
              core.setFailed('댓글 내용이 없습니다.');
              return;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
